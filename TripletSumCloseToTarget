# Time Complexity : O(n2)
# Space Complexity : O(n)
def searchTriplet(arr, target_sum):
    # TODO: Write your code here
    if len(arr) < 3: return 0
    arr.sort()
    closest = arr[len(arr) - 1] * 3
    for i in range(len(arr) - 1):
        closest = binary(i, i + 1, target_sum, arr, closest)

    return closest

def binary(current, next, targetSum, arr, closest):
    right = len(arr) - 1
    
    while (next < right):
        tempSum = arr[current] + arr[next] + arr[right]
        currentClosest = abs(targetSum - closest)
        newClosest = abs(targetSum - tempSum)

        if currentClosest > newClosest:
            closest = tempSum
        elif currentClosest == newClosest:
            if closest > tempSum:
                closest = tempSum

        if targetSum > tempSum:
            next += 1
        elif targetSum < tempSum:
            right -= 1
        else:
            closest = tempSum
            break

    return closest

# Input
# 3         
# 4
# -1 0 2 3
# Output : 2
if __name__ == "__main__":
    target = int(input())
    arrayLength = int(input())
    array = [int(x) for x in input().split()]
    print(searchTriplet(array, target))