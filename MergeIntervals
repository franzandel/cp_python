class Interval:
 def __init__(self, start, end):
   self.start = start
   self.end = end

# def merge(intervals):
#     mergedIntervals = []
#     # TODO: Write your code here
#     intervals.sort(key=lambda x: x[0])

#     for i in range(1, len(intervals)):
#       if intervals[i][0] < intervals[i - 1][1]:
#         if intervals[i - 1][1] > intervals[i][1]:
#            second = intervals[i - 1][1]
#            intervals[i][0] = intervals[i - 1][0]
#         else: 
#            second = intervals[i][1]
        
#         if second > intervals[i - 1][1]:
#             mergedIntervals.append([intervals[i - 1][0], second])
#       else:
#         mergedIntervals.append([intervals[i - 1][0], intervals[i - 1][1]])

#     return mergedIntervals

# Designgurus Solution
# Time Complexity : O(nlogn)
# Space Complexity : O(n)
def merge(intervals):
    mergedIntervals = []
    # TODO: Write your code here
    intervals.sort(key=lambda x: x[0])

    start = intervals[0][0]
    end = intervals[0][1]

    for i in range(1, len(intervals)):
       interval = intervals[i]
       if interval[0] <= end:
          end = max(end, interval[1])
       else:
          mergedIntervals.append([start, end])
          start = interval[0]
          end = interval[1]

    mergedIntervals.append([start, end])
    return mergedIntervals

if __name__ == "__main__":
    # intervals = [[1,4], [2,5], [7,9]]
    # intervals = [[1,4], [2,6], [3,5]]
    intervals = [[6,7], [2,4], [5,9]]
    print(merge(intervals))
