import heapq

# My Solution
# Time Complexity : O(nlogn)
# Space Complexity : O(n)
def findEmployeeFreeTime(schedule):
    result = []
    # TODO: Write your code here

    # flatten given array
    intervals = []
    for nested_list in schedule:
        for inner_list in nested_list:
            intervals.append(inner_list)

    intervals.sort(key=lambda x:x[0])

    # merge intervals
    start = intervals[0][0]
    end = intervals[0][1]
    mergedIntervals = []

    for i in range(1, len(intervals)):
       interval = intervals[i]
       if interval[0] <= end:
          end = max(end, interval[1])
       else:
          mergedIntervals.append([start, end])
          start = interval[0]
          end = interval[1]

    mergedIntervals.append([start, end])

    # get free time delta
    for i in range(1, len(mergedIntervals)):
        previous = mergedIntervals[i - 1]
        current = mergedIntervals[i]
        result.append([previous[1], current[0]])

    return result

if __name__ == "__main__":
    # schedule = [[[1, 3]], [[2, 4]], [[3, 5], [7, 9]]]
    # schedule = [[[1,3], [9,12]], [[2,4]], [[6,8]]]
    schedule = [[[1,3], [5,6]], [[2,3], [6,8]]]
    print(findEmployeeFreeTime(schedule))