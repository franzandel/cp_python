# [1, 3, 2, 0, -1, 7, 10]
# Implementing Designgurus Solution
# Time Complexity : O(n)
# Space Complexity : O(1)
# Input: [1, 3, 2, 0, -1, 7, 10]
# Output: 5
# Explanation: We need to sort only the subarray [1, 3, 2, 0, -1] to make the whole array sorted
def sort(arr):
    left, right = 0, len(arr) - 1

    while left < len(arr) - 1 and arr[left] <= arr[left + 1]:
        left += 1

    while right > 0 and arr[right] > arr[right - 1]:
        right -= 1

    if right <= left: return 0

    subarray = arr[left:right+1]
    minValue = min(subarray)
    maxValue = max(subarray)

    while left > 0 and minValue < arr[left - 1]:
        left -= 1

    while right < len(arr) - 1 and maxValue > arr[right + 1]:
        right += 1

    return right - left + 1

# 15 mins done
# My Solution
# Time Complexity : O(nlogn)
# Space Complexity : O(n)
# def sort(self, arr):
#     # TODO: Write your code here
#     sortedArray = sorted(arr)
#     left, right = 0, len(arr) - 1

#     while left <= right:
#       if arr[left] != sortedArray[left] and arr[right] != sortedArray[right]:
#         break

#       if arr[left] == sortedArray[left]:
#         left += 1
      
#       if arr[right] == sortedArray[right]:
#         right -= 1

#     result = right - left + 1
#     if result < 0:
#       return 0
#     else:
#       return result

if __name__ == "__main__":
    arrayLength = int(input())
    array = [int(x) for x in input().split()]
    print(sort(array))
        