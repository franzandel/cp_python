# Time Complexity = O(n3)
# Space Complexity = O(n)
# Input: [2, 0, -1, 1, -2, 2], target=2
# Output: [-2, 0, 2, 2], [-1, 0, 1, 2]
def searchQuadruplets(self, arr, target):
    quadruplets = []
    # TODO: Write your code here
    arr.sort()
    for i in range(len(arr) - 3):
      if i > 0 and arr[i] == arr[i - 1]: continue
      for j in range(i + 1, len(arr) - 2):
        if j > i + 1 and arr[j] == arr[j - 1]: continue

        left, right = j + 1, len(arr) - 1
        while left < right:
          sum = arr[i] + arr[j] + arr[left] + arr[right]
          if sum > target:
            right -= 1
          elif sum < target:
            left += 1
          else:
            quadruplets.append([arr[i], arr[j], arr[left], arr[right]])
            # while (left != len(arr) - 1 and arr[left] == arr[left + 1]): 
            left += 1
            # while (right != 0 and arr[right] == arr[right - 1]): 
            right -= 1
            while left < right and arr[left] == arr[left - 1]:
              left += 1
            while left < right and arr[right] == arr[right + 1]:
              right -= 1

    return quadruplets
