# My Solution (Inspired from Designgurus Solution)
# Time Complexity : O(m + n)
# Space Complexity : O(m)
def findStringAnagrams(str1, pattern):
    result_indices = []
    # TODO: Write your code here
    left, matched = 0, 0
    hashMap = {}

    for i in pattern:
        hashMap[i] = hashMap.get(i, 0) + 1

    for right in range(len(str1)):
      rightChar = str1[right]
      if rightChar in hashMap:
        hashMap[rightChar] -= 1
        if hashMap[rightChar] == 0:
          matched += 1

      if matched == len(hashMap):
            result_indices.append(left)
        
        # Both code works
      if right >= len(pattern) - 1:
    #   while right - left + 1 >= len(pattern):
        current = str1[left]
        left += 1
        if current in hashMap:
            if hashMap[current] == 0:
                matched -= 1
            hashMap[current] += 1

    return result_indices

if __name__ == "__main__":
    str1 = input()
    pattern = input()
    print(findStringAnagrams(str1, pattern))