# My Random Solution
def maxDepth(self, root):
    """
    :type root: TreeNode
    :rtype: int
    """
    if root is None: return 0
    depth = 1
    leftCount = self.depthCount(root.left, depth)
    rightCount = self.depthCount(root.right, depth)
    return max(leftCount, rightCount)

def depthCount(self, root, depth):
    if (root is None): return 1
    depthA = self.depthCount(root.left, depth) + 1
    depthB = self.depthCount(root.right, depth) + 1
    return max(depthA, depthB)

# Neetcode recursion solution
def maxDepth(self, root):
    if not root: return 0
    return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))

# Neetcode iterative BFS solution
def maxDepth(self, root):
        if not root: return 0

        level = 0
        queue = deque([root])

        while queue:
            for i in range(len(queue)):
                node = queue.popleft()

                if node.left:
                    queue.append(node.left)

                if node.right:
                    queue.append(node.right)

            level += 1

        return level

# Neetcode iterative DFS solution
def maxDepth(self, root):
    stack = [[root, 1]]
    res = 0

    while stack:
        node, depth = stack.pop()

        if node:
            res = max(res, depth)
            stack.append([node.left, depth + 1])
            stack.append([node.right, depth + 1])

    return res