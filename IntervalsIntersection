# My Solution
# Time Complexity : O(n)
# Space Complexity : O(n)
# def intervalsIntersection(intervals_a, intervals_b):
#     result = []
#     start = intervals_b[0][0]
#     end = intervals_b[len(intervals_b) - 1][1]

#     for i in range(len(intervals_a)):
#         if intervals_a[i][1] >= start and intervals_a[i][0] <= end:
#             if intervals_a[i][0] > start:
#                 left = intervals_a[i][0]
#             else:
#                 left = start

#             if intervals_a[i][1] < end:
#                 right = intervals_a[i][1]
#             else:
#                 right = end

#             result.append([left, right])

#     return result

# def intervalsIntersection(intervals_a, intervals_b):
#     result = []
#     for i in range(len(intervals_a)):
#         if intervals_b[0][0] > intervals_a[i][1]:
#             continue
#         else:
#             for j in range(len(intervals_b)):
#                 if intervals_a[i][0] > intervals_b[j][1]: continue

#                 if intervals_a[i][0] < intervals_b[j][0]:
#                     left = intervals_b[j][0]
#                 else:
#                     left = intervals_a[i][0]

#                 if intervals_a[i][1] < intervals_b[j][1]:
#                     right = intervals_a[i][1]
#                 else:
#                     right = intervals_b[j][1]

#                 result.append([left, right])
#                 break
#     return result

# def intervalsIntersection(intervals_a, intervals_b):
#     result = []
#     minIntersection = max(intervals_a[0][0], intervals_b[0][0])
#     maxIntersection = min(intervals_a[len(intervals_a) - 1][1], intervals_b[len(intervals_b) - 1][1])

#     if len(intervals_a) >= len(intervals_b):
#         for i in range(len(intervals_a)):
#             interval = intervals_a[i]
#             if interval[1] < minIntersection or interval[0] > maxIntersection:
#                 continue

#             if interval[0] < minIntersection:
#                 left = minIntersection
#             else:
#                 left = interval[0]

#             if interval[1] < maxIntersection:
#                 right = interval[1]
#             else:
#                 right = maxIntersection

#             result.append([left, right])
#     else:
#         for i in range(len(intervals_b)):
#             interval = intervals_b[i]
#             if interval[1] < minIntersection or interval[0] > maxIntersection:
#                 continue

#             if interval[0] < minIntersection:
#                 left = minIntersection
#             else:
#                 left = interval[0]

#             if interval[1] < maxIntersection:
#                 right = interval[1]
#             else:
#                 right = maxIntersection

#             result.append([left, right])
            
#     return result

# My Solution
# Time Complexity : O(n2)
# Space Complexity : O(n) / O(m)
def intervalsIntersection(intervals_a, intervals_b):
    result = []

    if len(intervals_a) >= len(intervals_b):
        for i in range(len(intervals_a)):
            for j in range(len(intervals_b)):
                intervalA = intervals_a[i]
                intervalB = intervals_b[j]
                if intervalB[0] > intervalA[1] or intervalA[0] > intervalB[1]: continue

                if intervalA[0] < intervalB[0]:
                    left = intervalB[0]
                else:
                    left = intervalA[0]

                if intervalA[1] < intervalB[1]:
                    right = intervalA[1]
                else:
                    right = intervalB[1]

                result.append([left, right])
                break
    else:
        for i in range(len(intervals_b)):
            for j in range(len(intervals_a)):
                intervalB = intervals_b[i]
                intervalA = intervals_a[j]
                
                if intervalA[0] > intervalB[1] or intervalB[0] > intervalA[1]: continue

                if intervalB[0] < intervalA[0]:
                    left = intervalA[0]
                else:
                    left = intervalB[0]

                if intervalB[1] < intervalA[1]:
                    right = intervalB[1]
                else:
                    right = intervalA[1]

                result.append([left, right])
                break
            
    return result

if __name__ == "__main__":
    intervals_a = [[1, 3], [5, 6], [7, 9]]
    intervals_b = [[2, 3], [5, 7]]
    # intervals_a = [[1, 3], [5, 7], [9, 12]]
    # intervals_b = [[5, 10]]
    # intervals_a = [[1, 3], [5, 7], [9, 12]]
    # intervals_b = [[2, 4], [6, 8], [11, 13]]
    # Output : [[2, 3], [6, 7], [11, 12]]
    print(intervalsIntersection(intervals_a, intervals_b))