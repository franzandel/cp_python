# My first solution
def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
    if not root and not subRoot: return True
    if not root: return False
    if not subRoot: return True
    
    def isSameTree(root, subRoot):
        if not root and not subRoot: return True
        if not root: return False
        if not subRoot: return False
        if (root.val != subRoot.val): return False
        return isSameTree(root.left, subRoot.left) and isSameTree(root.right, subRoot.right)

    
    if root.val == subRoot.val:
        result = isSameTree(root, subRoot)
        if result:
            return result
        else:
            return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)
    else:
        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)
    
# Optimized solution (From Neetcode)
def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
    if not root and not subRoot: return True
    if not root: return False
    if not subRoot: return True

    if self.isSameTree(root, subRoot):
        return True

    return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)

def isSameTree(self, root, subRoot):
    if not root and not subRoot: return True
    if not root: return False
    if not subRoot: return False
    if (root.val != subRoot.val): return False
    return self.isSameTree(root.left, subRoot.left) and self.isSameTree(root.right, subRoot.right)