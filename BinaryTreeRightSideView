# My own solution
def rightSideView(self, root):
    """
    :type root: TreeNode
    :rtype: List[int]
    """
    res = []
    q = deque()
    q.append(root)

    while q:
        qLen = len(q)
        addedInCurrentLevel = False
        for i in range(qLen):
            node = q.popleft()
            if node:
                if not addedInCurrentLevel:
                    res.append(node.val)
                    addedInCurrentLevel = True

                q.append(node.right)
                q.append(node.left)

    return res

# Neetcode solution
def rightSideView(self, root):
    """
    :type root: TreeNode
    :rtype: List[int]
    """
    res = []
    q = deque([root])

    while q:
        rightSide = None
        qLen = len(q)
        for i in range(qLen):
            node = q.popleft()
            if node:
                rightSide = node
                q.append(node.left)
                q.append(node.right)
            
        if rightSide:
            res.append(rightSide.val)

    return res